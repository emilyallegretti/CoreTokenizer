Note: everything between the lines was written by Chat GPT, but the actual test files (except testInput1) are all written by me
Note: While creating these test cases, I haven't implemented the terminate on invalid token yet
        If it is implememted when testing, the outputs will be the same up to token 34 (you can ignore everything after that)
---------------------------------------------------
To thoroughly test your tokenizer for the given language with the specified rules, you should create test cases that cover all the different token types, edge cases, and potential issues. 
Here are some test cases you can use:
1.	Basic Tokenization:
    •	Input: program begin end ; , = ! [ ] && || ( ) + - * != == < > <= >=
    •	Expected Tokens: [program, begin, end, ;, ,, =, !, [, ], &&, ||, (, ), +, -, *, !=, ==, <, >, <=, >=]
2.	Identifiers:
    •	Input: ABC ABC123 A1B2C3
    •	Expected Tokens: [ABC, ABC123, A1B2C3]
3.	Reserved Words:
    •	Input: if then else while loop read write int
    •	Expected Tokens: [if, then, else, while, loop, read, write, int]
4.	Integers:
    •	Input: 42 123 0
    •	Expected Tokens: [42, 123, 0]
5.	Combining Tokens with Whitespace:
    •	Input: program begin end ;
    •	Expected Tokens: [program, begin, end, ;]
6.	Special Symbols with Optional Whitespace:
    •	Input: == !=+ <=- >=* || &&
    •	Expected Tokens: [==, !=, +, <=, -, >=, *, ||, &&]
7.	Identifiers with Whitespace:
    •	Input: programABC beginXYZ end123;
    •	Expected Tokens: [programABC, beginXYZ, end123, ;]
8.	Illegal Identifier:
    •	Input: ABCend
    •	Expected Error: Identifier cannot contain lowercase letters.
9.	Invalid Token:
    •	Input: @
    •	Expected Error: Invalid character.
10.	Whitespace-Only Input:
    •	Input: \n\t \n
    •	Expected Tokens: [] (No tokens should be generated from whitespace-`only input)
11.	Mixed Input:
    •	Input: program ABC123 = 42; if(ABC)then write ABC123
    •	Expected Tokens: [program, ABC123, =, 42, ;, if, (, ABC, ), then, write, ABC123]
12.	Edge Case: Empty Input:
    •	Input: ``
    •	Expected Tokens: [] (No tokens should be generated from an empty input)
13.	Edge Case: Input with Special Symbols and Whitespace:
    •	Input: + - * && || ( )
    •	Expected Tokens: [+, -, *, &&, ||, (, )]
14.	Edge Case: Identifier Starting with a Digit:
    •	Input: 1ABC
    •	Expected Error: Identifier cannot start with a digit.
15.	Edge Case: Identifier Starting with a Lowercase Letter:
    •	Input: abc
    •	Expected Error: Identifier must start with an uppercase letter.
16.	Edge Case: Reserved Word as Part of an Identifier:
    •	Input: beginLoop
    •	Expected Tokens: [beginLoop]
17.	Complex Input with Various Tokens and Whitespace:
    •	Input: program ABC123=42; if (ABC) then write ABC123 end;
    •	Expected Tokens: [program, ABC123, =, 42, ;, if, (, ABC, ), then, write, ABC123, end, ;]

---------------------------------------------------
Test files:
Case 1-4, 11, 17 are covered in testInput2
Case 5 is covered in testInput1
Case 6 and 7 are covered in testInput3
    note: the sample input for case 7 is invalid for the grammar, but the concept is tested
Case 8 is covered in testInput4 
    note: might want to alter file to have illegal identifier at the beginning, middle, and end of file
Case 9 is covered in testInput5
    note: might want to alter file to have illegal symbol at the beginning, middle, and end of file
Case 10 is covered in testInput6
    note: the sample input provided should result in a prompt telling the user the file is empty
Case 12 is covered in testInput7
    note: the sample input provided should result in a prompt telling the user the file is empty
Case 13 is covered in testInput8
Case 14 is covered in testInput9
    note: might want to alter file to have illegal identifier at the beginning, middle, and end of file
Case 15 is covered in testInput10
    note: might want to alter file to have illegal identifier at the beginning, middle, and end of file
Case 16 is covered in testInput11
    note: the sample output is incorrect, the result should be an invalid reserved word
    note: the file containts two invalid reserved words, if you exit the program on one invlid, you won't see both


---------- testInput1 Expected Output ----------
1
4
32
13
32
12
2
10
32
12
10
32
12
11
32
12
11
32
12
3
5
20
32
22
32
21
6
5
20
32
22
32
21
6
12
2
8
16
32
24
32
17
12
32
12
31
33
----------

---------- testInput2 Expected Output ----------
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
31
32
32
32
32
32
33
----------

---------- testInput3 Expected Output ----------
26
26
26
26
14
15
15
25
25
24
27
28
27
27
29
15
24
22
23
18
23
23
23
23
19
18
18
24
19
32
32
32
32
33
----------

---------- testInput4 Expected Output ----------
1
2
12
4
32
14
31
34
18
19
3
33
----------

---------- testInput5 Expected Output ----------
32
32
20
21
16
34
4
3
10
11
5
8
33
----------

---------- testInput6 Expected Output ----------
Empty Input File, No Tokens
----------

---------- testInput7 Expected Output ----------
Empty Input File, No Tokens
----------

---------- testInput8 Expected Output ----------
24
24
22
23
22
23
18
22
22
18
19
16
20
17
21
17
21
12
12
33
----------

---------- testInput9 Expected Output ----------
34
33
----------

---------- testInput10 Expected Output ----------
34
33
----------

---------- testInput11 Expected Output ----------
34
34
33
----------